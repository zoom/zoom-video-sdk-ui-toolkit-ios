// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -module-name ZoomVideoSDKUIToolkit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import DeveloperToolsSupport
import Foundation
import ReplayKit
import Swift
import SwiftUI
import UIKit
import ZoomVideoSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class ActiveSpeakerGalleryView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_documentation(visibility: private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_documentation(visibility: private) extension ZoomVideoSDKUIToolkit.ActiveSpeakerGalleryView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
public struct SessionContext {
  public var jwt: Swift.String
  public var sessionName: Swift.String
  public var sessionPassword: Swift.String?
  public var username: Swift.String
  public init(jwt: Swift.String, sessionName: Swift.String, sessionPassword: Swift.String? = nil, username: Swift.String)
  public init(sessionContextObject: ZoomVideoSDKUIToolkit.SessionContextObjC)
}
@objc @objcMembers public class SessionContextObjC : ObjectiveC.NSObject {
  @objc public var jwt: Swift.String
  @objc public var sessionName: Swift.String
  @objc public var sessionPassword: Swift.String?
  @objc public var username: Swift.String
  @objc public init(jwt: Swift.String, sessionName: Swift.String, sessionPassword: Swift.String? = nil, username: Swift.String)
  @objc deinit
}
@objc public enum UIToolkitError : Swift.Int, Swift.CaseIterable {
  case Success
  case EmptyKeyOrSecret = 1000
  case InvalidKeyOrSecret
  case EmptySessionName = 2000
  case EmptySessionToken
  case TokenEmptySessionName
  case EmptyUsername
  case InvalidSessionName
  case WrongPassword
  case InvalidSessionToken
  case MissingPassword
  case SessionNameTooLong
  case TokenMismatchedSessionName
  case TokenUserIdentityTooLong
  case InvalidParam
  case JoinFailed
  case AlreadyInProgress
  case NoMicrophonePermission = 3000
  case NoCameraPermission
  case LeaveSessionFailed
  case MuteMicFailed
  case UnmuteMicFailed
  case StartCameraFailed
  case StopCameraFailed
  case SendGroupMessageFailed
  case SendPrivateMessageFailed
  case EnableGroupAndPrivateChatFailed
  case DisableGroupAndPrivateChatFailed
  case ChangeVirtualBackgroundFailed
  case ChangeLocalUserNameFailed
  case ChangeSingleParticipantNameFailed
  case RequestToUnmuteEveryoneFailed
  case MuteEveryoneFailed
  case RequestToUnmuteSingleParticipantFailed
  case MuteSingleParticipantFailed
  case RevokeManagerFailed
  case GrantManagerFailed
  case ChangeHostFailed
  case RemoveParticipantFailed
  case EndSessionFailed
  case ShareScreenFailed
  public var description: (Swift.String) {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ZoomVideoSDKUIToolkit.UIToolkitError]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [ZoomVideoSDKUIToolkit.UIToolkitError] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_documentation(visibility: private) @objc public class UIToolkitErrorParser : ObjectiveC.NSObject {
  @objc public static func descriptionForError(_ error: ZoomVideoSDKUIToolkit.UIToolkitError) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public struct InitParams {
  public var appGroupId: Swift.String?
  public var features: [ZoomVideoSDKUIToolkit.UIToolkitFeature]?
  public var recordingConsentMessage: Swift.String?
  public init(appGroupId: Swift.String? = nil, features: [ZoomVideoSDKUIToolkit.UIToolkitFeature]? = nil, recordingConsentMessage: Swift.String? = nil)
  @_documentation(visibility: private) public init(initParamsObject: ZoomVideoSDKUIToolkit.InitParamsObjC)
}
@objc @objcMembers public class InitParamsObjC : ObjectiveC.NSObject {
  @objc public var appGroupId: Swift.String?
  public var features: [ZoomVideoSDKUIToolkit.UIToolkitFeature]?
  @objc public var recordingConsentMessage: Swift.String?
  public init(appGroupId: Swift.String? = nil, features: [ZoomVideoSDKUIToolkit.UIToolkitFeature]? = nil, recordingConsentMessage: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class UIToolkitComponentManager {
  @_Concurrency.MainActor public class func shared() -> ZoomVideoSDKUIToolkit.UIToolkitComponentManager
  @_Concurrency.MainActor public func cleanup()
  @_Concurrency.MainActor public func setup(with inputSessionContext: ZoomVideoSDKUIToolkit.SessionContext, inputInitParams: ZoomVideoSDKUIToolkit.InitParams? = nil)
  @_Concurrency.MainActor public func setupDelegate(with delegate: any ZoomVideoSDKUIToolkit.UIToolkitDelegate)
  @_Concurrency.MainActor public func startJoinSession()
  @_Concurrency.MainActor public func leaveSession(toEnd: Swift.Bool)
  @_Concurrency.MainActor public func setTitleBar(with titleBar: ZoomVideoSDKUIToolkit.TitleNavBar)
  @_Concurrency.MainActor public func setActiveSpeakerGalleryView(with view: ZoomVideoSDKUIToolkit.ActiveSpeakerGalleryView)
  @_Concurrency.MainActor public func setCTABar(with ctaBar: ZoomVideoSDKUIToolkit.CTANavBar)
  @_Concurrency.MainActor public func addParticipantsView(to vc: UIKit.UIViewController, view: UIKit.UIView)
  @_Concurrency.MainActor public func closeParticipantsView()
  @_Concurrency.MainActor public func pushParticipantsView()
  @_Concurrency.MainActor public func isChatAvailable() -> Swift.Bool
  @_Concurrency.MainActor public func addChatView(to vc: UIKit.UIViewController, view: UIKit.UIView)
  @_Concurrency.MainActor public func closeChatView()
  @_Concurrency.MainActor public func pushChatView()
  @_Concurrency.MainActor public func addSettingsView(to vc: UIKit.UIViewController, view: UIKit.UIView)
  @_Concurrency.MainActor public func closeSettingsView()
  @_Concurrency.MainActor public func pushSettingsView()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class UIToolkitVC : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var delegate: (any ZoomVideoSDKUIToolkit.UIToolkitDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(sessionContext: ZoomVideoSDKUIToolkit.SessionContext, initParams: ZoomVideoSDKUIToolkit.InitParams? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public init(sessionContextObject: ZoomVideoSDKUIToolkit.SessionContextObjC, initParamsObject: ZoomVideoSDKUIToolkit.InitParamsObjC? = nil)
  @objc deinit
  @_documentation(visibility: private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_documentation(visibility: private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_documentation(visibility: private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_documentation(visibility: private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_documentation(visibility: private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_documentation(visibility: private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
}
@_documentation(visibility: private) extension ZoomVideoSDKUIToolkit.UIToolkitVC : @preconcurrency ZoomVideoSDKDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onError(_ ErrorType: ZoomVideoSDKError, detail details: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onSessionNeedPassword(_ completion: ((Swift.String?, Swift.Bool) -> ZoomVideoSDKError)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onSessionPasswordWrong(_ completion: ((Swift.String?, Swift.Bool) -> ZoomVideoSDKError)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onSessionJoin()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onSessionLeave(_ reason: ZoomVideoSDKSessionLeaveReason)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onUserJoin(_ helper: ZoomVideoSDKUserHelper?, users userArray: [ZoomVideoSDKUser]?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onUserLeave(_ helper: ZoomVideoSDKUserHelper?, users userArray: [ZoomVideoSDKUser]?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onUserAudioStatusChanged(_ helper: ZoomVideoSDKAudioHelper?, user userArray: [ZoomVideoSDKUser]?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onUserVideoStatusChanged(_ helper: ZoomVideoSDKVideoHelper?, user userArray: [ZoomVideoSDKUser]?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onUserShareStatusChanged(_ helper: ZoomVideoSDKShareHelper?, user: ZoomVideoSDKUser?, status: ZoomVideoSDKReceiveSharingStatus)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onUserActiveAudioChanged(_ helper: ZoomVideoSDKUserHelper?, users userArray: [ZoomVideoSDKUser]?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onChatNewMessageNotify(_ helper: ZoomVideoSDKChatHelper?, message chatMessage: ZoomVideoSDKChatMessage?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onChatPrivilegeChanged(_ helper: ZoomVideoSDKChatHelper?, privilege currentPrivilege: ZoomVideoSDKChatPrivilegeType)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onUserNameChanged(_ user: ZoomVideoSDKUser?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onUserHostChanged(_ helper: ZoomVideoSDKUserHelper?, users user: ZoomVideoSDKUser?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onUserManagerChanged(_ user: ZoomVideoSDKUser?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onCloudRecordingStatus(_ status: ZoomVideoSDKRecordingStatus, recordAgreementHandler handler: ZoomVideoSDKRecordAgreementHandler?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onHostAskUnmute()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onCallCRCDeviceStatusChanged(_ state: ZoomVideoSDKCRCCallStatus)
}
@_documentation(visibility: private) extension ZoomVideoSDKUIToolkit.UIToolkitVC : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
public enum UIToolkitFeature : Swift.CaseIterable {
  case Video
  case Audio
  case ShareScreen
  case Users
  case Chat
  case VirtualBackground
  case CloudRecording
  case Settings
  public static func == (a: ZoomVideoSDKUIToolkit.UIToolkitFeature, b: ZoomVideoSDKUIToolkit.UIToolkitFeature) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ZoomVideoSDKUIToolkit.UIToolkitFeature]
  nonisolated public static var allCases: [ZoomVideoSDKUIToolkit.UIToolkitFeature] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CTANavBar : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_documentation(visibility: private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func fitLayoutTo(view parentView: UIKit.UIView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class TitleNavBar : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_documentation(visibility: private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public protocol UIToolkitDelegate {
  func onError(_ errorType: ZoomVideoSDKUIToolkit.UIToolkitError)
  func onViewLoaded()
  func onViewDismissed()
  func startJoinSessionSuccessed()
  func leaveSession(reason: ZoomVideoSDKSessionLeaveReason)
  func chatPermissionChanged(enable: Swift.Bool)
}
extension ZoomVideoSDKUIToolkit.UIToolkitDelegate {
  public func onError(_ errorType: ZoomVideoSDKUIToolkit.UIToolkitError)
  public func onViewLoaded()
  public func onViewDismissed()
  public func startJoinSessionSuccessed()
  public func leaveSession(reason: ZoomVideoSDKSessionLeaveReason)
  public func chatPermissionChanged(enable: Swift.Bool)
}
extension ZoomVideoSDKUIToolkit.UIToolkitError : Swift.Equatable {}
extension ZoomVideoSDKUIToolkit.UIToolkitError : Swift.Hashable {}
extension ZoomVideoSDKUIToolkit.UIToolkitError : Swift.RawRepresentable {}
extension ZoomVideoSDKUIToolkit.UIToolkitComponentManager : Swift.Sendable {}
extension ZoomVideoSDKUIToolkit.UIToolkitFeature : Swift.Equatable {}
extension ZoomVideoSDKUIToolkit.UIToolkitFeature : Swift.Hashable {}
